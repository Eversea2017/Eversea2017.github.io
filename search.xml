<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git教程]]></title>
    <url>%2Fgit%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[借着做九宫格的机会，顺便写一下git和github常规操作 安装Git我是在win7下安装的，在这里选择Windows环境，然后下载Git exe程序，然后按步骤提示一步步下去安装就可以了，安装成功之后win+r调出cmd界面，输入git –version命令，如下，说明git已经正确安装在你的电脑里了，你可以正常使用了。 本地创建版本库版本库英文名为“repository”，其实就相当于window中的文件夹，可以使用Git对整个repository进行管理创建版本库有以下流程：初始化空文件夹，首先新建一个文件夹，在文件夹里鼠标右键选择Git Bash Here，然后在命令行输入以下1git init 输入这个命令之后这个文件夹就变成了一个Git管理的仓库，里面只有一个.git的目录，把你写好的程序或者文件放在当前仓库然后使用git add把文件添加到仓库，1git add "文件名字" 上一步如果使用git add “文件名字”报错的话，可以使用git add . 执行上面的命令，会没有任何显示，然后使用git commit把文件提交到仓库1git commit -m "提交标记" 提交之后会有以下提示，我的当前仓库里我放置了一个我自己写的index.html网页 添加远程库登录github，点击右上角+号选择New repostory，然后填写Repostory name即可，这个就是你新建的仓库名字，我新建的仓库名字为jiugongge，填写名字之后直接点击最下面Create reposito，一个新的仓库就建成了。这个时候你去这个仓库看你会发现里面什么都没有，因为你还没有在里面提交任何代码。把本地仓库的内容推送到github仓库1git remote add origin 仓库地址 例如我使用的就是以下命令1git remote add origin https://github.com/Eversea2017/jiugongge.git 输入这个命令没有任何提示 把本地内容推送到远程1git push -u origin master 输入这个命令之后会有一个github验证，输入用户名和密码即可之后出现这个说明本地内容远程推送成功了 这个时候再去仓库查看的话可以看到刚刚推送的内容了 github pagegithub有一个强大的功能，github page先定位到你的仓库主页，然后点击最后边的setting，然后往下拉有一个github page， 点击none选取里面的master branch，下面还可以选择你github page页面的主题，点击save，然后刷新一下再拉到github page这里会看到这么一句话1“Your site is ready to be published at http://eversea.top/jiugongge/.”， 点击这个链接，你就可以看到你项目里的index页面了，要想实现这个github page ，必须要在项目首页放一个index 更新代码我在之前写好的index.html文件里面新加了几行代码，这时候改怎么更新到远程呢先添加 1git add . 再提交 1git commit -m "更新说明" 拉取当前分支最新代码 1git pull push到远程 1git push -u origin master]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS]]></title>
    <url>%2FCSS.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[HTML（一）]]></title>
    <url>%2FHTML%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content type="text"><![CDATA[文档设置标记格式标记文本标记标题标记共有六个级别，为1-6，不同级别对应显示大小不同的标题，h1最大，h6最小 字体设置标记设置字体的格式，有三个常用属性123size，定义字体大小，取值范围是1-7，浏览器默认是3，&lt;font size="3"&gt;color，定义字体颜色，&lt;font clore="red"&gt;face，定义字体，&lt;font face="微软雅黑"&gt; 常用粗体字斜体字文字下标字体标记文字上标字体标记下划线字体标记 图像标记]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML]]></title>
    <url>%2FHTML.html</url>
    <content type="text"><![CDATA[## HTML的基本结构html12解释， HTML文档的文档标记，也称为HTML开始标记这对标记分别位于网页最前端和最后端。&lt;html&gt;在网页最前端，&lt;/html&gt;在网页最后端 head123解释，HTML文件头标记，也称为HTML头信息开始标记用来包含文件的基本信息，比如网页的标题，关键字在&lt;head&gt; &lt;/head&gt;内可以放&lt;title&gt; &lt;/title&gt;、&lt;meta&gt;&lt;/meta&gt;、&lt;style&gt;&lt;/styke&gt;等标记 title123解释，HTML文件标题标记网页的主题，显示在浏览器的窗口的左上边标题尽量短小，&lt;title&gt; &lt;/title&gt;中不能包含任何其它标记 body123456789解释，HTML文档的主体标记&lt;body&gt; &lt;/body&gt;是网页的主体部分，有以下属性bgcolor，设置背景颜色text，设置文本颜色link，设置链接颜色vlink，设置已经访问过了的链接颜色alink，正在被点击的链接的颜色leftmargin，网页左部不留空白topmargin，网页顶部不留空白 meta123解释，页面的元信息提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词常用的name属性，author，keywords，description，others 格式标记123456789&lt;br&gt; 强制换行标记，让后面的文字，图片，表格显示在下一行&lt;p&gt; 换段落标记&lt;center&gt; 居中对齐标记&lt;pre&gt; 预格式化标记&lt;li&gt; 列表项目标记&lt;ul&gt; 无序列表标记&lt;ol&gt; 有序列表标记，可以显示一些特定的顺序，&lt;hr&gt; 水平分割线标记&lt;div&gt; 分区显示标记，也称之为层标记 有序列表标记的格式 1234&lt;ol type="符号类型"&gt;&lt;li type="符号类型"&gt; &lt;/li&gt;&lt;li type="符号类型"&gt; &lt;/li&gt;&lt;/ol&gt; 有序列表的type属性值1234阿拉伯数字1,2,3等，默认type属性值大写字母A,B,C等大写字母a,b,c等大小写罗马数字 有序列表还可以通过value来指定一个新的序列数字起始值 文本标记12345678hn 标题标记，共有6个级别，n为1-6，h1最大，h6最小font 字体设置标记，常用三个属性值size（字体大小），取值范围是1-7，浏览器默认字体大小为3，color（颜色），如 "red"，face（字体），如"微软雅黑"&lt;b&gt; 粗字体标记&lt;i&gt; 斜字体标记&lt;u&gt; 下划线标记&lt;sub&gt; 文字下标字体标记&lt;sup&gt; 文字上标字体标记&lt;tt&gt; 打印机字体标记 超链接链接语法 1&lt;a href="url" ta rget="打开方式" name="页面锚点名称"&gt;链接文本&lt;/a&gt; href属性，是链接的地址，可以是一个网页，也可以是一个视频，图片，音乐等target属性，是定义超链接的打开方式，默认是_seif，在当前窗口打开超链接，_blank在一个新的窗口打开超链接，_parent在父窗口打开页面，_top在顶层窗口打开文件。name属性，指定页面的锚点名称，当一个页面篇幅很长时，可以通过name属性跳转到定点，方法如下在HTML文档中插入name1&lt;a name="tips"&gt;凡&lt;/a&gt; 在HTML文档中创建一个链接到凡的超链接，这样在当前网页点击访问凡就能到凡的位置了1&lt;a href="#tips"&gt;访问凡&lt;/a&gt; 图片超链接，效果是鼠标点击一下图片跳到指定网址 123&lt;a href="demo2.html" target="a_blank"&gt;&lt;img src=r.jpg&gt;&lt;/a&gt;demo2.html为站内链接r.jpg为站内图片 图像标记使用方法 1&lt;img src="路径/文件名.图片格式" width="属性值" height="属性值" border="属性值 alt="属性值"&gt; 各属性值如下12345src属性，指定我们要加载的图片的路径和图片的名称以及图片格式width属性，指定图片宽度，单位为px，em，cmheigth属性，指定图片的高度，单位为px，em，cmborder属性，指定图片的边框宽度，单位为px，em，cmalt属性，如果图片加载失败，会用文字代替图像显示，鼠标放到图像上。会显示设置的alt属性值，搜索引擎可以通过这个属性的文字来抓取图片 另外需要注意的是标记是一个单标记，在加载图像文件的时候，文件的路径或者文件名文件格式错误，将无法加载图片 表格table标记基本格式 1&lt;table 属性1="属性值1" 属性2="属性值2"&gt;表格内容&lt;/table&gt; table标签的属性width，宽度，heigth，高度border，边框，align，对齐，默认左对齐。cellspacing，单元格与单元格之间的距离，默认2pxcellpadding，单元格内容与单元格边框的显示距离frame，控制表格边框最外层的四条线框，有以下属性值123456789void，默认值，表示无边框above，表示仅顶部有边框below，表示仅底部有边框hsides，顶部和底部有边框lhs，仅有左侧边框rhs，仅有右侧边框vsides，左右侧边框box，全部四个边框border全部四个边框 rules，控制是否显示以及如何显示单元格之间的分割线，属性值如下none,默认值，表示无分割线all，包括所有分割线rows，仅有行分割线clos，仅有列分割线groups，仅在行组和列组之间有分割线 ####capthion标记当需要定义表格标题时，可以添加caption属性插入的位置位于table属性之后，tr表格行之前，属性值为aligntop，标题放在表格上部bottom，标题放在表格的下部left，标题放在表格左部right，标题放在表格右部 tr标记定义表格的一行，对于每一个表格行，都是由一对标记表示，每一行tr标记内可以嵌套多个td或th标记 td和th都是单元格的标记，必须嵌套在tr标签内，是成对出现的，th是头标记，通常位于首行或者首列，th中的文字默认会被加粗，而td不会td是数据标记，表示该单元格的具体数据 bgcolor，设置背景颜色， align，设置垂直方向对齐方式，bottom，top，middle valign，设置水平方向对齐方式，left，right，center td和th属性值如下 bgcolor align valign width height rowspan 设置单元格所占行数 colspan 设置单元格所占列数 HTML框架框架将浏览器划分为不同的部分，每一部分加载不同的网页，实现在同一浏览器窗口中加载多个页面的效果，有以下属性值cols，分割左右窗口rows，分割上下窗口frameborder，指定是否显示边框，0为不显示，1为显示border，设定边框的大小，默认值为5像素frame子窗口标记必须放在中使用，在中设置了几个窗口，就必须对用使用几个框架，而且还必须使用src属性指定一个网页，属性值如下src，加载网页文件的URL地址name，框架名称，是链接标记的target所要参数scrolling，框架滚动条，auto，根据需要自动出现，yes，有，no，无frameborder，是否需要表框，1为显示边框，2为不显示边框 表单设计表单标记，定义表单的开始位置和结束位置，表单提交时的内容就是表单的内容属性如下name 表单名称method，传输数据的方式，分为post和get 文本域和密码标记属性type属性，text，当type为text时，表示为一个文本输入域，password，当type为password时，表示为一个密码输入域，默认是一个文本输入域name属性，定义控件的名称，要传输数据时，必须定义控件名称value属性，初始化值，打开浏览器时，文本框中的内容size属性，设置控件的长度maxlength属性，设置输入框中最大允许输入的字符数 提交、重置、普通按钮当时，为提交按钮当时，为重置按钮当时，为普通按钮 单选框和复选框当时，为单选按钮，选这个不显示另一个，设置name当时，为复选框单选框和复选框都可以使用checked属性来是指默认选中项，单选框选中之后不能点不选，复选框可以 隐藏域当&lt;input type=”hidden”时，为隐藏表单域 多行文本域 rows属性和cols属性分别用来指定显示的行数和列数，单位是字符个数 菜单下拉列表域 标记 HTML &lt;!DOCTYPE&gt; 申明标签&lt;!DOCTYPE&gt;声明不是html标签，它是只是web浏览器关于页面使用哪个HTML版本进行编写的指令申明必须是HTML文档的第一行，位于标签之前HTML5申明&lt;!DOCTYPE html&gt;]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建VPN]]></title>
    <url>%2F%E6%90%AD%E5%BB%BAVPN.html</url>
    <content type="text"><![CDATA[最近因工作需要使用VPN，工欲善其事必先利其器，想着还是自己弄一个VPN吧，买的梯子又贵还不稳定，遂在阿里云买了一台云服务器，然后自己在这个云服务器上搭建VPN服务，这样自己可以拥有多个VPN账号了，随时随地都可以访问那几个常见的404网站了，下面记录了本次过程 准备工作购买服务器首先先得买一个服务器，我是在阿里云购买的，买的是美东节点的，你要是没有上Google，Facebook等网站的需求，可以买国内节点的就行，毕竟国外节点的云服务器不是很稳定。 远程连接服务器服务器是运行在在云端的，你要使用和配置你的服务器，就必须采取远程连接的方法，这里我使用的是xshell，电脑先下载安装好xshell，然后打开xshell，点击连接，主机填写你的服务器公网IP地址，端口22，然后确定点连接之后输入用户名root输入密码就可以了。 搭建VPN服务过程使用一下命令查看当前购买的ECS美国服务器CentOS 7版本 1# cat /etc/redhat-release 查看当前系统版本 安装ppp、pptpd和iptables 1# yum -y install ppp pptpd iptables 安装完之后可以使用以下命令查看下 1# rpm -qa | grep -E “ppp|pptpd|iptables” 配置ppp DNS信息，编辑options.pptpd 1# vi /etc/ppp/options.pptpd 查找文件中ms-dns关键字，如下 12#ms-dns 10.0.0.1#ms-dns 10.0.0.2 找到之后在下面添加以下两行 12ms-dns 8.8.8.8ms-dns 8.8.8.8 添加两行后，配置结果如下 1234#ms-dns 10.0.0.1#ms-dns 10.0.0.2ms-dns 8.8.8.8ms-dns 4.4.4.4 配置VPN帐号和密码，编辑chap-secrets配置文件 1# vim /etc/ppp/chap-secrets 设置VPN帐号+服务类型+VPN密码+IP，”*”代表所有IP，也可以固定某个IP配置pptpd，编辑options.pptpd配置文件 1# vim /etc/pptpd.conf 查找localip关键字，删去掉localip和remoteip前的#，修改后如下 配置内核支持转发，编辑sysctl.conf配置文件 1# vim /etc/sysctl.conf 在末尾添加如下一行， net.ipv4.ip_forward=1 保存退出并使用以下命令重新加载内核配置项 1# sysctl -p 设置iptables的转发规则 12345# iptables -t nat -F# iptables -t nat -A POSTROUTING -s 192.168.0.234/24 -j SNAT --to 你的服务器的公网IP# iptables -I INPUT -p tcp --dport 1723 -j ACCEPT# iptables -I INPUT -p tcp --dport 47 -j ACCEPT# iptables -I INPUT -p gre -j ACCEPT 重启一下pptpd服务和iptables服务生效 12# systemctl restart iptables# systemctl restart pptpd win7连接VPN看效果右下角打开网络共享中心→设置新的连接和网络→连接到工作区→使用我的internet连接（VPN）→internet地址输入你买的服务器的公网IP，其他的选项不重要随便→输入你前面创建的用户名和密码，然后点连接，显示连接成功就可以了，然后google一下。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python基础（二）]]></title>
    <url>%2FPython%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content type="text"><![CDATA[函数定义函数123456def test(x): y=3*x+6 return(y)a=test(4)print(a)18 12345def:定义函数的关键字test:函数名():内可定义形参return:定义返回值test():调用运行，此处()内的参数为实际参数 全局变量与局部变量12345678name = 'eversea'def change_name(): name="樊鑫" print(name)change_name()print(name)樊鑫eversea 12def()函数里的name为局部变量，所以在主程序不起作用要想让def()函数里的name变量成为全局变量，只需加 在def()函数里加上 global name 即可。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python基础（一）]]></title>
    <url>%2FPython%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content type="text"><![CDATA[变量Python中变量不需要申明，可用”=”赋值后直接使用，”=”左边为变量名，右边为变量值 123456789101112131415161718192021222324252627name = 'eversea'``` Python还允许同时为多个变量赋值```bash a = b = c = 'hello'``` ## 集合Python中，集合和字典的符号都是&#123;&#125;，但是字典&#123;&#125;里面是一个个key:value键值对，定义一个集合```bashs=set('hello')print (s)&#123;'o', 'e', 'l', 'h'&#125;``` 集合有无序、不重复的特点，你第一次和第二次打印同一个集合可能顺序不一样，并且一个集合内不会有一样的元素，集合有以下常用运算### 添加```bashs=set('hello')s.add('a')print (s)&#123;'o', 'e', 'l', 'h', 'a'&#125; 清空1234s=set('hello')s.clear()print (s)set() 拷贝1234s=set('hello')s1=s.copy()print (s1)&#123;'h', 'o', 'e', 'l'&#125; 随机删除123s=set('hello')s1=s.pop()print (s1) 指定删除12345678910111213141516171819s=set('hello')s.remove('e')print (s)&#123;'h', 'l', 'o'&#125; ``` ### 求交集、并集、差集```basha=&#123;'a','b','c',1,2,3&#125;b=&#123;'c',2,3,5&#125;print(a&amp;b)print(a|b)print(a-b)print(b-a)&#123;2, 'c', 3&#125;&#123;1, 2, 'b', 3, 5, 'a', 'c'&#125;&#123;1, 'a', 'b'&#125;&#123;5&#125; 字典(dict)如下定义一个字典，键值之间用:隔开，键值对以,隔开，所有的键值对在{}中 1info = &#123;"k1":"a",'k2':'b'&#125;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python魔法]]></title>
    <url>%2FPython%E9%AD%94%E6%B3%95.html</url>
    <content type="text"><![CDATA[字符串魔法首字母大写123456789101112test="everSEA"v=test.capitalize()print(v)EverSEA``` #### 全部转换为小写，仅支持英文字符转换，.casefold() 支持多种语言``` bashtest="everSEA"v=test.lower()print(v)eversea 全部转换为大写1234test="everSEA"v=test.upper()print(v)EVERSEA 大小写转换123456789101112131415test="everSEA"v=test.swapcase()print(v)EVERsea``` #### 判断字符是否全部是大写``` bashtest1="everSEA"test2="EVERSEA"v1=test1.isupper() #islower判断小写v2=test2.isupper()print(v1,v2)FalseTrue 字符串居中显示，指定字符总数并设定空白处填充字符test="ever" v=test.center(20,"*") print(v) ********ever******** 字符串居左test="ever" v=test.ljust(20,"*") print(v) ever**************** 字符串居右test="ever" v=test.rjust(20,"*") print(v) ****************ever 字符串居右并填充0test="ever" v=test.zfill(20,"*") print(v) 0000000000000000ever 统计指定的子序列（有序排列的连续的字符）数量，可指定统计的start，end位置（正整数代表从左的偏移量，负整数代表右侧开始的偏移量）test="everever" v1=test.count("ev") v2=test.count("ev",2,8) print(v1) print(v2) 2 1 判断起始字符test="ever" v1=test.startswith("ev") v2=test.startswith("el") print(v1) print(v2) True False 判断终止字符test="ever" v1=test.endswith("er") v2=test.endswith("el") print(v1) print(v2) True False 找到匹配的子序列输出其位置（从0开始计数），未找到则返回-1test="everever" v1=test.find("ev") v2=test.find("ew") print(v1) print(v2) 0 -1 拼接test1="eversea" test2="*" v=test1.join(test1) print(v) e*v*e*r*s*e*a 去除空白，还可以去除指定内容test="alex" v=test.strip("a") print(v) lex 分割，可以指定分隔符和分割次数test="alexalex" v=test.split("e",1) print(v) ['al', 'xalex'] 获取当前字符串中由几个字符组成test="alexalex" v=len(test) print(v) 8 $ hexo server gg gg gg]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3与pycharm安装]]></title>
    <url>%2FPython3%E4%B8%8Epychare%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[Python3安装环境：win7+Python3先下载Python3下载好之后，一路安装就行了，记住把环境变量加上去，如下 安装成功之后，win+r调出cmd界面输入Python如下说明你的电脑已正确安装了Python pycharm安装下载pycharm，选专业版的下载。下载好之后一步一步点下去即可安装好之后，破解步骤如下： 修改host文件，windoes系统host文件路径为C:\Windows\System32\drivers\etc，添加如下一行，目的是屏蔽pycharm对激活码的验证0.0.0.0 account.jetbrains.com 打开pycharm，选择Active code，输入以下激活码，点击ok即可EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 验证成功之后，点击Create New Project，然后在下面界面设置好Project位置和解释器 使用pycharm输出我的第一行代码]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础之函数]]></title>
    <url>%2FPython%E5%9F%BA%E7%A1%80.html</url>
    <content type="text"><![CDATA[定义函数定义一个称为sayhelloworld的函数，并调用 def sayhelloworld(): print ('hello,world') sayhelloworld() 输出 hello,world 函数形参和实参第一个使用pritmax中，直接给数，即实参。第二个使用中，使用变量调用函数，即形参 def printmax(a,b): if a&gt;b: print(a, 'is maxmum') if a&lt;b: print(b, 'is maxmum') printmax(3,4) f=5 h=6 printmax(f,h) 输出 4 is maxmum 6 is maxmum 局部变量当你在函数定义内声明变量的时候，它们与函数外具有相同名称的其他变量没有任何关系，即变量名称对于函数来说是局部的。可以在函数模块通过global语句申明是全局变量 def func(x): print ('x is', x) x=2 print('change local x to', x) x=50 func(x) print('x is still', x) 输出 x is 50 change local x to 2 x is still 50 可以在函数模块通过使用global语句来申明函数模块里某个参数是全局变量 def func(): global x print ('x is', x) x=2 print('change local x to', x) x=50 func() print('x is still', x) 输出 x is 50 change local x to 2 x is still 2 ###默认参数值 def say(message, times=1): print(message*times) say('hello') say('world',5) 输出 hello worldworldworldworldworld x is still 2]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 博客常用操作]]></title>
    <url>%2Fhexo-%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[写博客插入图片打开站点配置文件_config.yml，找到post_asset_folder，将其值改为true，如下所示：1post_asset_folder: true 创建博客使用命令创建 $ hexo new [layout] &lt;title&gt; 其中的layout可以省略，例如 $ hexo new "test" 使用命令创建之后，在source/_post文件夹里面就会出现一个”test”的文件和一个”test”的文件夹，然后把图片放进这个文件夹中，采用如下命令引用图片 {% asset_img 引用图片.jpg 引用图片 %} 效果如下]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[memory]]></title>
    <url>%2Fmemory.html</url>
    <content type="text"><![CDATA[关关雎鸠，在河之洲。窈窕淑女，君子好逑。 参差荇萍，左右流之。窈窕淑女，寤寐求之。 求之不得，寤寐思服。悠哉悠哉，辗转反侧。 参差荇萍，左右采之。窈窕淑女，琴瑟友之。 参差荇萍，左右芼之。窈窕淑女，钟鼓乐之。]]></content>
      <tags>
        <tag>最爱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post123456789$ hexo new "My New Post"``` More info: [Writing](https://hexo.io/docs/writing.html)### Run server``` bash$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
